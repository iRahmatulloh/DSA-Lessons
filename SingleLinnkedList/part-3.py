class Node:    def __init__(self, data):        self.data = data        self.next = Noneclass LinkedList:    def __init__(self):        self.head = None    # datani oxirgisiga qo'shadi    def append(self, data):        new_node = Node(data)        if self.head is None:            self.head = new_node            return        last_node = self.head        while last_node.next:            last_node = last_node.next        last_node.next = new_node    def get_all(self):        ls = []        if self.head is None:            print(ls)            return ls        cur_node = self.head        while cur_node.next:            ls.append(cur_node.data)            cur_node = cur_node.next        ls.append(cur_node.data)        print(ls)    def remove_at(self, pos):        if self.head is None:            return        index = 0        rem_node = self.head        prev_node = None        while index != pos:            prev_node = rem_node            rem_node = rem_node.next            index += 1            prev_node.next = rem_node.next    def length_recursive(self, node):        if node is None:            return 0        return 1 + self.length_recursive(node.next)    def merge(self, llist):        cur_node = self.head        while cur_node.next:            cur_node = cur_node.next        cur_node.next = llist.headllist = LinkedList()llist.append('a')llist.append('b')llist.append('c')llist.append('d')llist.append('e')# llist.remove_at(2)llist.get_all()print(llist.length_recursive(llist.head))