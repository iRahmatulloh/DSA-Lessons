class Node:    def __init__(self, data):        self.data = data        self.next = Noneclass LinkedList:    def __init__(self):        self.head = None    def append(self, data):        if self.head is None:            self.head = Node(data)            return        last = self.head        while last.next:            last = last.next        last.next = Node(data)    def get_all(self):        ls = []        cur_node = self.head        while cur_node.next:            ls.append(cur_node.data)            cur_node = cur_node.next        ls.append(cur_node.data)        return ls    def is_empty(self):        if self.head is None:            return True        return False    def get_head(self):        return self.head    def remove_at(self, value):        new_node = Node(value)        cur_node = self.head        prev = None        index = 0        while cur_node != value:            index += 1            prev = cur_node            cur_node = cur_node.next            prev.next = cur_node.nextllist = LinkedList()