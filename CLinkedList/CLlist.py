class Node:    def __init__(self, data):        self.data = data        self.next = Noneclass CLinkedList:    def __init__(self):        self.head = None    def append(self, data):        new_node = Node(data)        if self.head is None:            self.head = new_node            new_node.next = self.head            return        last_node = self.head        while last_node.next != self.head:            last_node = last_node.next        new_node.next = self.head        last_node.next = new_node    def prepend(self, data):        new_node = Node(data)        last_node = self.head        while last_node.next != self.head:            last_node = last_node.next        new_node.next = self.head        last_node.next = new_node        self.head = new_node    def get_all(self):        ls = []        cur = self.head        while cur.next != self.head:            ls.append(cur.data)            cur = cur.next        ls.append(cur.data)        return ls    def remove(self, node):        cur_node = self.head        if self.head.data == node:            last_node = self.head            while last_node.next != self.head:                last_node = last_node.next            last_node.next = self.head.next            self.head = self.head.next            return        prev_node = None        while cur_node.data != node:            prev_node = cur_node            cur_node = cur_node.next        prev_node.next = cur_node.nextclist = CLinkedList()clist.append(1)clist.append(2)clist.append(3)clist.append(4)clist.remove(1)print(clist.get_all())# Josephus Problem